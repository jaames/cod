module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = function(lines) {
            var result = [],
                i;

            for (i = 0; i < lines.length; i += 1) {
              if (lines[i][0] != null) {
                result.push.apply(result, indent(lines[i][0]));
              }
              result.push(lines[i][1]);
            }
            return build(result);
          },
        peg$c2 = "\n",
        peg$c3 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c4 = function() {
            return '';
          },
        peg$c5 = peg$FAILED,
        peg$c6 = null,
        peg$c7 = function(i, s) {
            var text = '';

            switch (s.type) {
            case 'tag':
              break;
            case 'text':
              if (i == null) {
                s.text = s.text.substr(lvl);
              }
              break;
            }
            return [i, s];
          },
        peg$c8 = function(i) {
          return [i, {type:'text', text:''}]
        },
        peg$c9 = " ",
        peg$c10 = { type: "literal", value: " ", description: "\" \"" },
        peg$c11 = void 0,
        peg$c12 = function(i) {
            lvl = i.length;
            return i;
          },
        peg$c13 = function(i) { return prev.type === 'tag' || i.length < lvl; },
        peg$c14 = function() {
            return null;
          },
        peg$c15 = /^[^ \n]/,
        peg$c16 = { type: "class", value: "[^ \\n]", description: "[^ \\n]" },
        peg$c17 = function(str) {
            return str.join('');
          },
        peg$c18 = "@",
        peg$c19 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c20 = function(name, value) {
            var _value;
            if(!isNaN(parseFloat(value))) {
              _value = parseFloat(value);
            } else if (value === 'true') {
              _value = true;
            } else if (value === 'false') {
              _value = false;
            } else {
              _value = value;
            }

            return {type: 'tag', name: name, value: _value};
          },
        peg$c21 = function(tag) {
            prev = tag
            return tag;
          },
        peg$c22 = /^[^\n]/,
        peg$c23 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c24 = function(str) {
            prev = {type: 'text', text: str};
            return prev;
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseline();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseline();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenewline() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 10) {
        s1 = peg$c2;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c4();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseline() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseindent();
      if (s1 === peg$FAILED) {
        s1 = peg$c6;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetag();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetext();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenewline();
          if (s3 === peg$FAILED) {
            s3 = peg$c6;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c7(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseindent();
        if (s1 === peg$FAILED) {
          s1 = peg$c6;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenewline();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c8(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      }

      return s0;
    }

    function peg$parseindent() {
      var s0;

      s0 = peg$parsetag_indent();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetext_indent();
      }

      return s0;
    }

    function peg$parsetag_indent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c9;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parse_tag();
        peg$silentFails--;
        if (s3 !== peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$c11;
        } else {
          s2 = peg$c5;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }

      return s0;
    }

    function peg$parsetext_indent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c9;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parse_text();
        if (s3 === peg$FAILED) {
          s3 = peg$parsenewline();
        }
        peg$silentFails--;
        if (s3 !== peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$c11;
        } else {
          s2 = peg$c5;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c13(s1);
          if (s3) {
            s3 = peg$c11;
          } else {
            s3 = peg$c5;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c12(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }

      return s0;
    }

    function peg$parseblank_indent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsenewline();
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = peg$c11;
      } else {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c14();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c15.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c15.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
        }
      } else {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c17(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parse_tag() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (input.charCodeAt(peg$currPos) === 32) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 32) {
              s4 = peg$c9;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_text();
            if (s4 === peg$FAILED) {
              s4 = peg$c6;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c20(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c5;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }

      return s0;
    }

    function peg$parsetag() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parse_tag();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c21(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parse_text() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c22.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
        }
      } else {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c17(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetext() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parse_text();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c24(s1);
      }
      s0 = s1;

      return s0;
    }


      
    /*
    Adapted from http://stackoverflow.com/a/10708913/742156
     */
    var build, depths, extractObj, indent, isArray, isPrimitive, lvl, prev, primitiveTypes,
      __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

    lvl = 0;

    prev = {};

    isArray = function(obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };

    primitiveTypes = ['string', 'boolean', 'number'];

    isPrimitive = function(obj) {
      var _ref;
      return _ref = typeof obj, __indexOf.call(primitiveTypes, _ref) >= 0;
    };

    extractObj = function(obj) {
      var newObj, _obj;
      if (isArray(obj)) {
        _obj = obj[obj.length - 1];
      } else {
        _obj = obj;
      }
      if (isPrimitive(_obj)) {
        if (!isArray(obj)) {
          throw new Error('Expected a list but got a primitive');
        }
        newObj = Object.create(null);
        newObj['!value'] = _obj;
        _obj = obj[obj.length - 1] = newObj;
      }
      return _obj;
    };

    build = function(list) {
      var doIndent, doc, item, key, keyStack, keys, len, name, newObj, obj, prevObj, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _obj, _ref, _ref1, _ref2, _ref3;
      console.log(list);
      keyStack = [];
      doc = Object.create(null);
      obj = doc;
      len = list.length;
      doIndent = function(key) {
        var val, _obj;
        if (isArray(obj)) {
          _obj = obj[obj.length - 1];
        } else {
          _obj = obj;
        }
        val = _obj[key];
        if ((val == null) || isPrimitive(val)) {
          _obj[key] = Object.create(null);
          if ((val != null) && val !== true) {
            _obj[key]['!value'] = val;
          }
        }
        return obj = _obj[key];
      };
      if ((list.length === 1) && (list[0].type === 'text') && (list[0].text == null)) {
        return Object.create(null);
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        switch (item.type) {
          case 'tag':
            newObj = null;
            keys = item.name.split(':');
            prevObj = obj;
            _ref = keys.slice(0, -1);
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              key = _ref[_j];
              doIndent(key);
            }
            key = keys[keys.length - 1];
            _obj = extractObj(obj);
            if (_obj[key] == null) {
              _obj[key] = (_ref1 = item.value) != null ? _ref1 : true;
            } else {
              if (((item.value == null) || isPrimitive(item.value)) && !isArray(_obj[key])) {
                _obj[key] = [_obj[key]];
              }
              if (isArray(_obj[key])) {
                if (item.value != null) {
                  value = item.value;
                } else {
                  value = Object.create(null);
                  newObj = value;
                }
                _obj[key].push(value);
              }
            }
            obj = prevObj;
            prev = item;
            break;
          case 'indent':
            if ((prev != null ? prev.name : void 0) == null) {
              continue;
            }
            _ref2 = prev.name.split(':');
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              key = _ref2[_k];
              doIndent(key);
            }
            keyStack.push(prev.name);
            break;
          case 'outdent':
            keyStack.pop();
            obj = doc;
            for (_l = 0, _len3 = keyStack.length; _l < _len3; _l++) {
              name = keyStack[_l];
              _ref3 = name.split(':');
              for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
                key = _ref3[_m];
                if (isArray(obj)) {
                  obj = obj[obj.length - 1];
                }
                obj = obj[key];
              }
            }
            break;
          case 'text':
            console.log('item', item);
            console.log('obj', obj);
            if (item.text == null) {
              item.text = '';
            }
            _obj = extractObj(obj);
            if (_obj['!text'] != null) {
              _obj['!text'] += '\n' + item.text;
            } else {
              _obj['!text'] = item.text;
            }
        }
      }
      return doc;
    };

    depths = [0];

    indent = function(s) {
      var dents, depth;
      depth = s.length;
      if (depth === depths[0]) {
        return [];
      }
      if (depth > depths[0]) {
        depths.unshift(depth);
        return [
          {
            type: 'indent',
            depth: depth
          }
        ];
      }
      dents = [];
      while (depth < depths[0]) {
        depths.shift();
        dents.push({
          type: 'outdent',
          depth: depth
        });
      }
      if (depth !== depths[0]) {
        dents.push({
          type: 'baddent'
        });
      }
      return dents;
    };



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
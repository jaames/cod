extends layout

block title
  | cod: An unassuming documentation format 

block header
  header
    h1 Cod
    h2.rule
      span An Unassuming Doc Format
    h4
      em (Documentus modestus)

block content
  a(href="https://github.com/namuol/cod")<img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png">

  section.main-example
    section.examples
      .example.left
        :markdown
          ```js
          /**
          @SomeModule
            Text about @SomeModule
            
            @use_any_tag_you_want
            @property
              Text about @property
              @sub_property 42
            @list a
            @list b
            @list c
          */
          ```
      
      .example.right
        :markdown
          ```json
          {
            "SomeModule": {
              "!text": "Text about @SomeModule\n",
              "use_any_tag_you_want": true,
              "property": {
                "!text": "Text about @property",
                "sub_property": 42
              },
              "list": [ "a", "b", "c" ]
            }
          }
          ```

  section.about
    section.text
      section
        header
          h1
            span "Stupid by Design"
        p
          | Cod is not a documentation generator, <em>per se</em>.
        p
          | Cod's <a href="http://github.com/namuol/cod#format">format</a> is language-agnostic.
        p
          | Cod imposes no fixed set of <code>@tags</code>, and doesn't do any kind of code
          | analysis.

        p
          | Cod merely transforms your in-code docs into plain-old JSON.
          | It's up to you to turn this JSON into something more human-readable.
        p
          | This affords Cod's users a great deal of control:

          ul
            li Use any markup language in text sections (or don't).
            li Use a single doc format across multiple languages.
            li Use your existing website styles instead of writing themes.
            li Use <a href="#domain-specific-docs">domain-specific</a> tags i.e. <code>@model</code>/<code>@view</code>/<code>@controller</code>
        p
          | In other words, <em>Cod may not be smart, but it's not stubborn, either</em>.

        p
          | Cod comes with an easy-to-use <a href="http://github.com/namuol/cod#cli">command-line tool</a>,
          | and a <a href="http://github.com/namuol/cod#api">JavaScript API</a>.

      section
        header
          h1
            span Why Cod?

        p
          | Documentation generators such as <em>Doxygen</em> or <em>JSDoc</em>
          | are great if you need nice-looking API docs as quickly as possible,
          | but "all-in-one" solutions quickly become too cumbersome when you need
          | finer control.

        p
          | Here are some scenarios where Cod might be a good choice:

        h4 Multi-Language Projects

        p
          | You've written a JavaScript library for your commercial web service and want
          | to release it to your customers.

        p
          | Your docs are already written in JSDoc, so you go about creating a custom theme to match your
          | service's existing website, giving the docs an official, professional quality.

        p
          | Suddenly, your customers begin clamoring for PHP and Ruby libraries as well, so you create them,
          | but PHP and Ruby each have their own doc-generators, and suddenly you need to create
          | <em>another</em> two new themes in entirely different doc-gen systems.
        p
          | This would have been an ideal use-case for Cod.
        p 
          | Since Cod is language-agnostic, it is possible to use the same doc
          | format in all languages, and the resulting JSON can be fed to a <em>single</em> set of templates.

        a(name='domain-specific-docs')
        h4 Domain-Specific Docs
        p
          | Most software is written using higher-level programming patterns (i.e. MVC).
        p
          | Most doc-generators limit their <code>@tags</code> to the terminology of the languages it supports, (i.e. <code>@class</code>,<code>@return</code>, etc.)
          | but Cod is language-agnostic, so any <code>@tag</code> is valid.

        p
          | Cod allows you to use tags like <code>@model</code>, <code>@view</code>, and <code>@controller</code> — <em>or <code>@whatever</code></em> — to
          | more concisely describe the structure of your code.

        h4 Obscure Languages

        p
          | Maybe you just don't have any other option.
        p
          | Perhaps you're creating your <em>own</em> doc-generator.
        p
          | Cod is a good "first-step" here, since it works with any language.

      section
        header
          h1
            span Install
        p Install with <code><a href="https://www.npmjs.org/package/cod">npm install -g cod</a></code>.
